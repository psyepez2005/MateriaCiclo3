[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.5 (Oracle Corporation Java 22)
[debug] Load.defaultLoad until apply took 93.6487ms
[debug]           Load.loadUnit: plugins took 68.3825ms
[debug]           Load.loadUnit: defsScala took 0.282ms
[debug] [Loading] Scanning directory Z:\si\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in Z:\si\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.973 ms
[debug]               Load.resolveProject(si-build) took 42.1974ms
[debug]             Load.loadTransitive: finalizeProject(Project(id si-build, base: Z:\si\project, plugins: List(<none>))) took 76.1735ms
[debug] [Loading] Done in Z:\si\project, returning: (si-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 107.8869ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.1974ms
[debug]         Load.loadUnit(file:/Z:/si/project/, ...) took 181.2615ms
[debug]       Load.apply: load took 313.9332ms
[debug]       Load.apply: resolveProjects took 4.3216ms
[debug]       Load.apply: finalTransforms took 48.2361ms
[debug]       Load.apply: config.delegates took 8.9899ms
[debug]       Load.apply: Def.make(settings)... took 337.5322ms
[debug]       Load.apply: structureIndex took 100.4869ms
[debug]       Load.apply: mkStreams took 1.9746ms
[info] loading project definition from Z:\si\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2279.0732ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory Z:\si
[debug]       Load.loadUnit: mkEval took 3.487ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2483 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 3.0712ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: Z:\si, plugins: List(<none>))) took 5.3691ms
[debug] [Loading] Done in Z:\si, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1745.2685ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.6089ms
[debug]   Load.loadUnit(file:/Z:/si/, ...) took 4035.076ms
[debug] Load.apply: load took 4056.7691ms
[debug] Load.apply: resolveProjects took 0.1429ms
[debug] Load.apply: finalTransforms took 8.8921ms
[debug] Load.apply: config.delegates took 0.3076ms
[debug] Load.apply: Def.make(settings)... took 55.7287ms
[debug] Load.apply: structureIndex took 20.2209ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to si (in build file:/Z:/si/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-a2faa148697a46d220d3
[debug] Writing bsp connection file
[info] started sbt server
